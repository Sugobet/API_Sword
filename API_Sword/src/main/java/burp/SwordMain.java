package burp;

import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.handler.HttpResponseReceived;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.persistence.PersistedObject;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import burp.api.montoya.ui.UserInterface;
import burp.api.montoya.ui.editor.HttpRequestEditor;
import burp.api.montoya.ui.editor.HttpResponseEditor;

import static burp.api.montoya.ui.editor.EditorOptions.READ_ONLY;

import javax.swing.*;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class SwordMain {
    private JTabbedPane tabbedPane1;
    private JPanel panel1;
    private JPanel apiMap;
    private JPanel swordSetting;
    private JPanel scope;
    private JSplitPane httpview;
    private JTextArea scopeList;
    private JTextPane note;
    public JCheckBox isReqAPI;
    public JCheckBox isUseHeader;
    private JCheckBox isTiming;
    public JTextField sleepTime;
    private JScrollPane siteMapPane;
    private JLabel title;
    public JCheckBox isStop;
    private JButton clearList;
    public JCheckBox isAddPathFuzzing;
    private JTextArea pathFuzzingList;
    private JTextField statusCodeFilterList;
    public JCheckBox isBaseURLFind;
    public JCheckBox isSetHeaders;
    private JTextArea setHeaderList;
    private JTextField warnList;
    public JCheckBox isBypassWarn;
    private JButton toSaveSettings;
    private JButton saveSiteMap;
    private JButton clearSiteMap;
    private JComboBox<String> Lang;
    private JLabel fscLabel1;
    private JTextArea backCustomPathList;
    public JCheckBox isBackCustomPath;
    public JTextField threadNum;
    public JButton useTPool;
    private JLabel threadNumLabel;
    private DefaultMutableTreeNode TreeRoot;
    // Create the JTree with the root node
    private JTree SiteMapTreeRoot;

    private String up1 = "/";

    public SwordMain() {

        $$$setupUI$$$();
        isTiming.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sleepTime.setEditable(isTiming.isSelected());
            }
        });

        Lang.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                // 切换语言
                setLang(e.getItem().toString());
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1 = new JTabbedPane();
        panel1.add(tabbedPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        apiMap = new JPanel();
        apiMap.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1, true, true));
        tabbedPane1.addTab("Site Map", apiMap);
        httpview = new JSplitPane();
        httpview.setDividerLocation(300);
        httpview.setDividerSize(5);
        apiMap.add(httpview, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        siteMapPane = new JScrollPane();
        siteMapPane.setEnabled(true);
        httpview.setLeftComponent(siteMapPane);
        scope = new JPanel();
        scope.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Scope", scope);
        final JScrollPane scrollPane1 = new JScrollPane();
        scope.add(scrollPane1, new GridConstraints(0, 0, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scopeList = new JTextArea();
        scopeList.setText("");
        scrollPane1.setViewportView(scopeList);
        final Spacer spacer1 = new Spacer();
        scope.add(spacer1, new GridConstraints(2, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        note = new JTextPane();
        note.setEditable(false);
        note.setText("");
        scope.add(note, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final Spacer spacer2 = new Spacer();
        scope.add(spacer2, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        swordSetting = new JPanel();
        swordSetting.setLayout(new GridLayoutManager(21, 9, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Setting", swordSetting);
        isReqAPI = new JCheckBox();
        isReqAPI.setSelected(true);
        isReqAPI.setText("允许主动对API请求");
        swordSetting.add(isReqAPI, new GridConstraints(0, 0, 1, 6, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        isUseHeader = new JCheckBox();
        isUseHeader.setSelected(true);
        isUseHeader.setText("是否使用原header");
        swordSetting.add(isUseHeader, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        isTiming = new JCheckBox();
        isTiming.setContentAreaFilled(true);
        isTiming.setEnabled(true);
        isTiming.setFocusPainted(true);
        isTiming.setFocusable(true);
        isTiming.setRequestFocusEnabled(true);
        isTiming.setRolloverEnabled(false);
        isTiming.setSelected(false);
        isTiming.setText("启用主动http请求速率");
        swordSetting.add(isTiming, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        swordSetting.add(spacer3, new GridConstraints(5, 5, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        isStop = new JCheckBox();
        isStop.setActionCommand("");
        isStop.setText("立即停止发送所有请求(急刹车)");
        swordSetting.add(isStop, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearList = new JButton();
        clearList.setText("清除当前SiteMap所有数据");
        swordSetting.add(clearList, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        swordSetting.add(scrollPane2, new GridConstraints(1, 5, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pathFuzzingList = new JTextArea();
        scrollPane2.setViewportView(pathFuzzingList);
        isAddPathFuzzing = new JCheckBox();
        isAddPathFuzzing.setActionCommand("");
        isAddPathFuzzing.setText("是否在主动请求时额外添加自定义路径请求(一行一个，非/开头)");
        swordSetting.add(isAddPathFuzzing, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        swordSetting.add(spacer4, new GridConstraints(20, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        swordSetting.add(spacer5, new GridConstraints(19, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        swordSetting.add(spacer6, new GridConstraints(18, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        swordSetting.add(spacer7, new GridConstraints(17, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer8 = new Spacer();
        swordSetting.add(spacer8, new GridConstraints(16, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer9 = new Spacer();
        swordSetting.add(spacer9, new GridConstraints(15, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer10 = new Spacer();
        swordSetting.add(spacer10, new GridConstraints(14, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer11 = new Spacer();
        swordSetting.add(spacer11, new GridConstraints(13, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer12 = new Spacer();
        swordSetting.add(spacer12, new GridConstraints(12, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer13 = new Spacer();
        swordSetting.add(spacer13, new GridConstraints(11, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fscLabel1 = new JLabel();
        fscLabel1.setText("过滤掉非200的自定义响应码：(英文逗号隔开)");
        swordSetting.add(fscLabel1, new GridConstraints(2, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        statusCodeFilterList = new JTextField();
        statusCodeFilterList.setText("404,301,302,0");
        swordSetting.add(statusCodeFilterList, new GridConstraints(3, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sleepTime = new JTextField();
        sleepTime.setEditable(false);
        sleepTime.setText("300");
        swordSetting.add(sleepTime, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, 1, 1, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setAlignmentX(0.0f);
        label1.setAlignmentY(0.5f);
        label1.setAutoscrolls(false);
        label1.setHorizontalAlignment(2);
        label1.setHorizontalTextPosition(2);
        label1.setOpaque(false);
        label1.setText("ms");
        label1.setToolTipText("");
        label1.putClientProperty("html.disable", Boolean.FALSE);
        swordSetting.add(label1, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        isBaseURLFind = new JCheckBox();
        isBaseURLFind.setText("允许API剑主动从响应中寻找baseURL并主动对baseURL进行路径拼接");
        swordSetting.add(isBaseURLFind, new GridConstraints(4, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        isSetHeaders = new JCheckBox();
        isSetHeaders.setText("添加自定义header字段：（自动覆盖已有的header字段）");
        swordSetting.add(isSetHeaders, new GridConstraints(6, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane3 = new JScrollPane();
        swordSetting.add(scrollPane3, new GridConstraints(7, 6, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        setHeaderList = new JTextArea();
        setHeaderList.setText("User-Agent: APT250&NSF/API_Sword");
        scrollPane3.setViewportView(setHeaderList);
        final Spacer spacer14 = new Spacer();
        swordSetting.add(spacer14, new GridConstraints(0, 7, 13, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer15 = new Spacer();
        swordSetting.add(spacer15, new GridConstraints(5, 8, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        isBypassWarn = new JCheckBox();
        isBypassWarn.setText("启用绕过危险接口访问(接口包含字符串则跳过)：逗号隔开");
        swordSetting.add(isBypassWarn, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        warnList = new JTextField();
        warnList.setText("/delete,/update,/del,del");
        swordSetting.add(warnList, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        saveSiteMap = new JButton();
        saveSiteMap.setText("保存SiteMap数据（未实现）");
        swordSetting.add(saveSiteMap, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearSiteMap = new JButton();
        clearSiteMap.setText("清空SiteMap的保存数据（未实现）");
        swordSetting.add(clearSiteMap, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        toSaveSettings = new JButton();
        toSaveSettings.setText("保存范围及所有设置");
        swordSetting.add(toSaveSettings, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Lang = new JComboBox<>();
        final DefaultComboBoxModel<String> defaultComboBoxModel1 = new DefaultComboBoxModel<>();
        defaultComboBoxModel1.addElement("EN");
        defaultComboBoxModel1.addElement("CN");
        Lang.setModel(defaultComboBoxModel1);
        swordSetting.add(Lang, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane4 = new JScrollPane();
        swordSetting.add(scrollPane4, new GridConstraints(12, 6, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        backCustomPathList = new JTextArea();
        backCustomPathList.setText("");
        scrollPane4.setViewportView(backCustomPathList);
        isBackCustomPath = new JCheckBox();
        isBackCustomPath.setActionCommand("");
        isBackCustomPath.setText("是否在API接口后、参数前额外添加自定义路径");
        swordSetting.add(isBackCustomPath, new GridConstraints(11, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        threadNum = new JTextField();
        threadNum.setText("1");
        swordSetting.add(threadNum, new GridConstraints(12, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        useTPool = new JButton();
        useTPool.setText("确定");
        swordSetting.add(useTPool, new GridConstraints(12, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        threadNumLabel = new JLabel();
        threadNumLabel.setText("线程数：");
        swordSetting.add(threadNumLabel, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        title = new JLabel();
        title.setText("");
        panel1.add(title, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, 1, null, null, null, 1, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    public JComponent InitRootComponent(MontoyaApi api, MyTableModel tableModel) {
        JComponent panel = $$$getRootComponent$$$();

        pathFuzzingList.setText("api/\n" +
                "user/v1/");

        backCustomPathList.setText(";/\n" +
                "/;\n" +
                "/\n" +
                "..;\n" +
                "/..;\n" +
                ";.js\n" +
                "/;.js");

        // scope视图
        scopeList.setText("nsfocus.com.cn/\nnsfocus.com.cn:8888/api/v1\n0.0.0.0");

        // 设置默认环境语言
        String _lang = Locale.getDefault().getCountry();
        setLang(_lang);

        clearList.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 清除site map数据
                TreeRoot.removeAllChildren();
                tableModel.removeAll();
                ((DefaultTreeModel) SiteMapTreeRoot.getModel()).reload();

                JOptionPane.showMessageDialog(toSaveSettings.getRootPane(), "ok！", "Tip", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        // 加载范围和设置
        loadConfig(api);

        // 保存范围和设置
        toSaveSettings.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 保存范围
                api.persistence().extensionData().setString("Scope", scopeList.getText());
                // 保存设置
                api.persistence().extensionData().setBoolean("IsReqAPI", isReqAPI.isSelected());
                api.persistence().extensionData().setBoolean("IsUseHeader", isUseHeader.isSelected());
                api.persistence().extensionData().setBoolean("IsStop", isStop.isSelected());

                api.persistence().extensionData().setBoolean("IsBypassWarn", isBypassWarn.isSelected());
                api.persistence().extensionData().setString("WarnList", warnList.getText());

                api.persistence().extensionData().setBoolean("IsAddPathFuzzing", isAddPathFuzzing.isSelected());
                api.persistence().extensionData().setString("PathFuzzingList", pathFuzzingList.getText());

                api.persistence().extensionData().setString("StatusCodeFilterList", statusCodeFilterList.getText());

                api.persistence().extensionData().setBoolean("IsBaseURLFind", isBaseURLFind.isSelected());

                api.persistence().extensionData().setBoolean("IsSetHeaders", isSetHeaders.isSelected());
                api.persistence().extensionData().setString("SetHeaderList", setHeaderList.getText());

                JOptionPane.showMessageDialog(toSaveSettings.getRootPane(), "ok！", "Tip", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        // site map视图
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        splitPane.setDividerLocation(360);

        JSplitPane tabs = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        tabs.setDividerLocation(600);

        UserInterface userInterface = api.userInterface();

        HttpRequestEditor requestViewer = userInterface.createHttpRequestEditor(READ_ONLY);
        HttpResponseEditor responseViewer = userInterface.createHttpResponseEditor(READ_ONLY);
        HttpResponseEditor orgResponseViewer = userInterface.createHttpResponseEditor(READ_ONLY);

        JTabbedPane tabs1 = new JTabbedPane();
        JTabbedPane tabs2 = new JTabbedPane();

        tabs1.addTab("Request", requestViewer.uiComponent());
        tabs2.addTab("Response", responseViewer.uiComponent());


        tabs.setLeftComponent(tabs1);
        tabs.setRightComponent(tabs2);
        // tabs.updateUI();

        // req和res上面的视图
        // 左边显示list

        // table of log entries
        JTable table = new JTable(tableModel) {
            @Override
            public void changeSelection(int rowIndex, int columnIndex, boolean toggle, boolean extend) {
                // show the log entry for the selected row
                HttpRequestResponse responseReceived = tableModel.getRes(rowIndex);
                HttpResponseReceived orgRes = tableModel.getOrgRes(rowIndex);

                var req = responseReceived.request();
                orgResponseViewer.setResponse(orgRes);
                orgResponseViewer.setSearchExpression(req.pathWithoutQuery());
                requestViewer.setRequest(req);
                responseViewer.setResponse(responseReceived.response());

                super.changeSelection(rowIndex, columnIndex, toggle, extend);
            }
        };
        // 自动排序 数据错乱
        table.setAutoCreateRowSorter(true);

        var tc = table.getColumnModel();
        tc.getColumn(0).setPreferredWidth(5);
        tc.getColumn(1).setPreferredWidth(200);
        tc.getColumn(2).setPreferredWidth(50);
        tc.getColumn(3).setPreferredWidth(7);
        tc.getColumn(4).setPreferredWidth(60);

        JScrollPane listP = new JScrollPane(table);

        // 右边显示来源
        JSplitPane orgP = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        orgP.setDividerLocation(780);

        orgP.setLeftComponent(listP);
        orgP.setRightComponent(orgResponseViewer.uiComponent());

        splitPane.setTopComponent(orgP);

        splitPane.setBottomComponent(tabs);
        httpview.setRightComponent(splitPane);


        // root
        TreeRoot = new DefaultMutableTreeNode("Site Map");
        // Create the JTree with the root node
        SiteMapTreeRoot = new JTree(TreeRoot);
        // SiteMapTreeRoot.setBorder(new EmptyBorder(0, 10, 0, 0));
        SiteMapTreeRoot.setShowsRootHandles(true);
        SiteMapTreeRoot.setUI(new MetalTreeUI());

        // 鼠标点击list事件
        SiteMapTreeRoot.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // api.logging().logToOutput("2");
                TreePath selPath = SiteMapTreeRoot.getPathForLocation(e.getX(), e.getY());
                // api.logging().logToOutput(selPath.toString());
                if (selPath != null && selPath.getLastPathComponent().toString().matches("/.*[^/]?$")) {
                    var list1 = tableModel.getResList();

                    StringBuilder url1 = new StringBuilder();
                    var ulp = selPath.getPath();
                    for (int i = 1; i < ulp.length; i++) {
                        if (i == 1) {
                            String _u = ulp[i].toString();
                            if (_u.endsWith("/")) {
                                url1.append(_u.substring(0, _u.length() - 1));
                                continue;
                            }

                        }
                        if (i == 2) {
                            continue;
                        }
                        url1.append(ulp[i]);
                    }

                    String url2 = url1.toString();

                    List<SuperHttpReqAndRes> data = new ArrayList<>();
                    for (SuperHttpReqAndRes hrr : list1) {
                        // 判断点击的list的路径是否在响应的请求中
                        if (hrr.getReq_res().request().url().contains(url2)) {
                            data.add(hrr);
                        }
                    }

                    up1 = url2;

                    // 将数据压入list显示
                    tableModel.pushDisplayData(data);


                    // api.logging().logToOutput("Clicked API Path: " + selPath);

//                        DefaultMutableTreeNode clickedNode = (DefaultMutableTreeNode) selPath.getLastPathComponent();
//                        // api.logging().logToOutput(clickedNode.toString());
//                        if (clickedNode != null && clickedNode.toString().matches("/.*[^/]$")) {
//                            api.logging().logToOutput("Clicked API Path: " + clickedNode.getUserObject().toString());
//                            // 从Model找到api的请求，添加进list
//                        }
                }
            }
        });

        siteMapPane.setViewportView(SiteMapTreeRoot);

        return panel;
    }

    public JTextArea getScopeList() {
        return scopeList;
    }

    public DefaultMutableTreeNode getTreeRoot() {
        return this.TreeRoot;
    }

//    public void setSiteMapPaneView() {
//        // var old = SiteMapTreeRoot.getUI();
//        // SiteMapTreeRoot.updateUI();
//        // SiteMapTreeRoot.setUI(old);
//        // ((DefaultTreeModel)SiteMapTreeRoot.getModel()).reload(tn);
//
//        siteMapPane.setViewportView(SiteMapTreeRoot);
//    }

    public JTree getSiteMapTreeRoot() {
        return SiteMapTreeRoot;
    }

    public synchronized void nodeChanged(MyTableModel tableModel) {
        var list1 = tableModel.getResList();

        List<SuperHttpReqAndRes> data = new ArrayList<>();
        for (SuperHttpReqAndRes hrr : list1) {
            // 判断点击的list的路径是否在响应的请求中
            if (hrr.getReq_res().request().url().contains(up1)) {
                data.add(hrr);
            }
        }
        // 将数据压入list显示
        tableModel.pushDisplayData(data);
    }

    public List<String> getPathFuzzingList() {
        return pathFuzzingList.getText().lines().toList();
    }

    public List<String> getBackCustomPathList() {
        return backCustomPathList.getText().lines().toList();
    }

    public String[] getStatusCodeFilterList() {
        return statusCodeFilterList.getText().split(",");
    }

    public List<String> getSetHeaderList() {
        return setHeaderList.getText().lines().toList();
    }

    public String[] getWarnList() {
        return warnList.getText().split(",");
    }

    void loadConfig(MontoyaApi api) {
        PersistedObject persistedData = api.persistence().extensionData();
        // 加载范围
        String _scope = persistedData.getString("Scope");
        setStrConf(_scope, scopeList);

        // 加载设置
        Boolean _IsReqAPI = persistedData.getBoolean("IsReqAPI");
        setBoolConf(_IsReqAPI, isReqAPI);

        Boolean _IsUseHeader = persistedData.getBoolean("IsUseHeader");
        setBoolConf(_IsUseHeader, isUseHeader);

        Boolean _IsStop = persistedData.getBoolean("IsStop");
        setBoolConf(_IsStop, isStop);

        Boolean _IsBypassWarn = persistedData.getBoolean("IsBypassWarn");
        setBoolConf(_IsBypassWarn, isBypassWarn);
        String _WarnList = persistedData.getString("WarnList");
        setStrConf(_WarnList, warnList);

        Boolean _IsAddPathFuzzing = persistedData.getBoolean("IsAddPathFuzzing");
        setBoolConf(_IsAddPathFuzzing, isAddPathFuzzing);
        String _PathFuzzingList = persistedData.getString("PathFuzzingList");
        setStrConf(_PathFuzzingList, pathFuzzingList);

        String _StatusCodeFilterList = persistedData.getString("StatusCodeFilterList");
        setStrConf(_StatusCodeFilterList, statusCodeFilterList);

        Boolean _IsBaseURLFind = persistedData.getBoolean("IsBaseURLFind");
        setBoolConf(_IsBaseURLFind, isBaseURLFind);

        Boolean _IsSetHeaders = persistedData.getBoolean("IsSetHeaders");
        setBoolConf(_IsSetHeaders, isSetHeaders);
        String _SetHeaderList = persistedData.getString("SetHeaderList");
        setStrConf(_SetHeaderList, setHeaderList);
    }

    void setBoolConf(Boolean key, JCheckBox jCheckBox) {
        if (key != null) {
            jCheckBox.setSelected(key);
        }
    }

    void setStrConf(String key, JTextComponent jTextComponent) {
        if (key != null) {
            jTextComponent.setText(key);
        }
    }

    void setLang(String lang) {
        if (lang.equals("CN")) {
            Lang.setSelectedItem("CN");
            title.setText("API剑 v1.0.1  by  NSFOCUS & APT250 --- M1n9K1n9");

            isReqAPI.setText("允许主动对API请求");
            isUseHeader.setText("是否使用原header");
            isTiming.setText("启用主动http请求速率");
            isStop.setText("立即停止发送所有请求(急刹车)");
            clearList.setText("清除当前SiteMap所有数据");
            isAddPathFuzzing.setText("是否在主动请求时额外添加自定义路径请求(一行一个，非/开头)");
            fscLabel1.setText("过滤掉非200的自定义响应码：(英文逗号隔开)");
            isBaseURLFind.setText("允许API剑主动从响应中寻找baseURL并主动对baseURL进行路径拼接");
            isSetHeaders.setText("添加自定义header字段：（自动覆盖已有的header字段）");
            isBypassWarn.setText("启用绕过危险接口访问(接口包含字符串则跳过)：逗号隔开");
            saveSiteMap.setText("保存SiteMap数据（未实现）");
            clearSiteMap.setText("清空SiteMap的保存数据（未实现）");
            toSaveSettings.setText("保存范围及所有设置");
            note.setText("强烈不建议单独一行使用*，否则扫出银河系被外星生命捕获信号 或扫进FBI、CIA等敏感组织资产信息 引发核战争或任何反人类罪行，作者概不承担责任\n\n" +
                    "限定url范围，字符串包含模式，暂不支持正则，一行一个\n" +
                    "例如：范围：nsfocus.com，其任何子域都将匹配，伪代码：url.contains(你设置的范围)\n" +
                    "单独一行*默认全部都在范围内，清空范围列表代表全部不在范围内\n\n" +
                    "API剑官方GitHub仓库：https://github.com/Sugobet/API_Sword\n" +
                    "如有任何问题或建议，请提交issue，作者将会第一时间处理，万般感谢\n" +
                    "NSF也可通过企业微信联系M1n9K1n9");
            isBackCustomPath.setText("是否在API接口后、参数前额外添加自定义路径");
            useTPool.setText("确定");
            threadNumLabel.setText("线程数：");
        } else {
            Lang.setSelectedItem("EN");
            title.setText("API Sword v1.0.1  by  NSFOCUS & APT250 --- M1n9K1n9");

            isReqAPI.setText("Allow active API requests");
            isUseHeader.setText("Use the original header");
            isTiming.setText("Enable active HTTP request rate");
            isStop.setText("Immediately stop sending all requests");
            clearList.setText("Clear all current SiteMap data");
            isAddPathFuzzing.setText("Add a custom path for requests (not starting with /)");
            fscLabel1.setText("Filter custom response codes other than 200:");
            isBaseURLFind.setText("Allow active search for the baseURL in the response and concatenate the path to the baseURL");
            isSetHeaders.setText("Add custom header fields: (automatically overwrite existing header fields)");
            isBypassWarn.setText("Enable bypassing dangerous interface access (skip if the interface contains a string):");
            saveSiteMap.setText("Save SiteMap data (not implemented)");
            clearSiteMap.setText("Clear saved SiteMap data (not implemented)");
            toSaveSettings.setText("Save scope and all settings");
            note.setText("Using * on a single line is strongly discouraged. Doing so could result in signals being captured by alien life forms in the galaxy, or sensitive information from organizations like the FBI and CIA being captured, potentially leading to nuclear war or any crimes against humanity. The author assumes no responsibility.\n\n" +
                    "To limit URL ranges, use a string containing a pattern. Regular expressions are not currently supported. Use one per line.\n" +
                    "For example, if the range is: nsfocus.com, any subdomain will be matched. In pseudocode: url.contains(your set range)\n" +
                    "A single * on a single line defaults to matching all domains within the range. Clearing the range list excludes all domains.\n\n" +
                    "API Sword Official GitHub Repository: https://github.com/Sugobet/API_Sword\n" +
                    "If you have any questions or suggestions, please submit an issue. The author will address it promptly. Thank you very much."
            );
            isBackCustomPath.setText("Add a custom path after the API interface and before the parameter");
            useTPool.setText("Use");
            threadNumLabel.setText("Thread number：");
        }
    }
}
